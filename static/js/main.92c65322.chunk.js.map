{"version":3,"sources":["features/nav/NavBar.js","features/home/HomePage.js","app/layout/App.js","serviceWorker.js","index.js"],"names":["NavBar","Menu","fixed","Container","Item","Icon","name","size","HomePage","align","Image","src","App","className","Component","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAeeA,EAZA,WACd,OACC,kBAACC,EAAA,EAAD,CAAMC,MAAM,OACX,kBAACC,EAAA,EAAD,KACC,kBAACF,EAAA,EAAKG,KAAN,KACC,kBAACC,EAAA,EAAD,CAAMC,KAAK,OAAOC,KAAK,c,SCIbC,EATE,WAEhB,OACC,kBAACL,EAAA,EAAD,CAAWM,MAAM,UAChB,kBAACC,EAAA,EAAD,CAAOC,IAAI,4DCWCC,E,uKAXb,OACC,kBAAC,WAAD,KACC,kBAAC,EAAD,MACA,kBAACT,EAAA,EAAD,CAAWU,UAAU,QACpB,kBAAC,EAAD,Y,GANaC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAASC,SAASC,eAAe,QAGtCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GD0HpB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92c65322.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu, Container, Icon } from 'semantic-ui-react';\n\nconst NavBar = () => {\n\treturn (\n\t\t<Menu fixed='top'>\n\t\t\t<Container>\n\t\t\t\t<Menu.Item>\n\t\t\t\t\t<Icon name='home' size='large' />\n\t\t\t\t</Menu.Item>\n\t\t\t</Container>\n\t\t</Menu>\n\t);\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { Container, Image } from 'semantic-ui-react';\n\nconst HomePage = () => {\n    \n\treturn (\n\t\t<Container align='center'>\n\t\t\t<Image src='https://image.flaticon.com/icons/svg/2422/2422166.svg' />\n\t\t</Container>\n\t);\n};\n\nexport default HomePage;\n","import React, { Component, Fragment } from 'react';\nimport NavBar from '../../features/nav/NavBar';\nimport HomePage from '../../features/home/HomePage';\nimport { Container } from 'semantic-ui-react';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<NavBar />\n\t\t\t\t<Container className='main'>\n\t\t\t\t\t<HomePage />\n\t\t\t\t</Container>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nlet render = () => {\n\tReactDOM.render(<App />, rootEl);\n};\n\nif (module.hot) {\n\tmodule.hot.accept('./app/layout/App', () => {\n\t\tsetTimeout(render);\n\t});\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}